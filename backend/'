using Microsoft.AspNetCore.SignalR;

public class Song
{
    Uri Link { get; set; }

    public Song(Uri link)
    {
        Link = link;
    }
}

public class SongSession
{
    private DateTime startTime = DateTime.Now;
    public Song Song { get; set; }
    public int Likes { get; set; } = 0;
    public int Dislikes { get; set; } = 0;
    public int CurrentPlaybackTime
    {
        get
        {
            TimeSpan duration = DateTime.Now - startTime;
            return (int)duration.TotalSeconds;
        }
    }

    public SongSession(Song song)
    {
        Song = song;
    }
}

public class RoomHub : Hub
{
    static Room room = new("Test Room");

    public override async Task OnConnectedAsync()
    {
        string userID = Context.ConnectionId;
        await Groups.AddToGroupAsync(userID, room.Name);

        RoomMember? member;
        if (!room.Members.TryGetValue(userID, out member))
        {
            room.Members[Context.ConnectionId] = member = new RoomMember(userID);
        }

        await base.OnConnectedAsync();
    }

    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        string userID = Context.ConnectionId;
        await Groups.RemoveFromGroupAsync(userID, room.Name);

        room.Members.Remove(userID);

        await base.OnDisconnectedAsync(exception);
    }
}

public class Room
{
    Queue<RoomMember> djQueue = new();

    public Dictionary<string, RoomMember> Members = new();
    public SongSession? SongSession { get; private set; }
    public RoomMember? DJ;

    public string Name { get; set; } = "";
    public string Owner { get; set; } = "";

    public void nextDJ()
    {
        RoomMember? prevDJ = DJ;
        DJ = null;
        SongSession = null;

        // find a DJ with at least one song 
        RoomMember? nextDJ;
        while (djQueue.TryDequeue(out nextDJ) && nextDJ.SongQueue.Count == 0)
            nextDJ = null;

        // set the new DJ
        if (nextDJ is null && prevDJ?.SongQueue.Count > 0)
        {
            DJ = prevDJ;
            SongSession = new SongSession(prevDJ.SongQueue.Dequeue());
        }
        else
        {
            DJ = nextDJ;
            SongSession = new SongSession(nextDJ!.SongQueue.Dequeue());
            if (prevDJ != null)
                djQueue.Enqueue(prevDJ);
        }
    }

    public Room(string name)
    {
        this.Name = name;
    }

    public override string ToString()
    {
        List<string> memberStrs = new();
        foreach (RoomMember member in Members.Values)
            memberStrs.Add(member.ToString());
        return $"[{string.Join(",", memberStrs)}]";
    }
}

public class RoomMember
{
    public Queue<Song> SongQueue = new();
    public string ID { get; private set; }

    public RoomMember(string id)
    {
        ID = id;
    }

    public override string ToString() => ID;
}
